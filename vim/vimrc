source ~/.vim/terminalkeys.vim
set cursorline

call plug#begin()
Plug 'flazz/vim-colorschemes'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'chriskempson/vim-tomorrow-theme'
"Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'
Plug 'pangloss/vim-javascript'
Plug 'hail2u/vim-css3-syntax'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'terryma/vim-multiple-cursors'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'vim-airline/vim-airline-themes'
Plug 'pangloss/vim-javascript'
"Plug 'ryym/vim-riot'
Plug 'othree/html5.vim'
Plug 'tpope/vim-fugitive'
call plug#end()

set t_ut=
set number
"autocmd vimenter * NERDTree
" others  delphi ekvoli inkpot jiks made_of_code maui neverland pf_earth
" other night - elda moonshine mushroom pride
colorscheme jayk-cobalt2
set laststatus=2
set hidden
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

" Airline 
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_theme = 'luna'


" tmux-navigator
let g:tmux_navigator_no_mappings = 1
"set term=xterm256

nnoremap <silent> <M-Left>  :TmuxNavigateLeft<cr>
"nnoremap <silent> <M-h>  :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
"nnoremap <silent> <M-l> :TmuxNavigateRight<cr>
nnoremap <silent> <M-\> :TmuxNavigatePrevious<cr>
nnoremap <silent> `` :b#<cr>
nnoremap <silent> `= :bnext<cr>
nnoremap <silent> `- :bprev<cr>
nnoremap <S-Home> :call Nextcolor()<cr>
let c = 1
while c <= 9
	  execute "nnoremap `" . c . " :" . c . "b\<CR>"
	    let c += 1
endwhile

let g:c_scheme = 0
let g:colorschemes = [ 'elda', 'moonshine', 'mushroom', 'pride', 'jayk-cobalt2', 'delphi', 'ekvoli', 'inkpot', 'jiks', 'made_of_code', 'maui', 'neverland', 'pf_earth']

function Nextcolor()
    let g:c_scheme += 1
    let max = len(g:colorschemes)
    if g:c_scheme >= max
        let g:c_scheme = 0
    endif
    exec "colorscheme ".g:colorschemes[g:c_scheme]
    echo g:colorschemes[g:c_scheme]
endfunction

"set <C-Up>=^[OA
"set <C-Down>=^[OB
"set <C-Left>=^[OD
"set <C-Right>=^[OC
map  <plug>NERDTreeTabsToggle<cr>
