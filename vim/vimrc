source ~/.vim/terminalkeys.vim
set cursorline

call plug#begin()
Plug 'scrooloose/syntastic'
Plug 'xolox/vim-misc'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'jayk/bufpos'
Plug 'flazz/vim-colorschemes'
Plug 'scrooloose/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'chriskempson/vim-tomorrow-theme'
"Plug 'airblade/vim-gitgutter'
Plug 'mhinz/vim-signify'
Plug 'hail2u/vim-css3-syntax'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'jasoncodes/ctrlp-modified.vim'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'terryma/vim-multiple-cursors'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'vim-airline/vim-airline-themes'
Plug 'pangloss/vim-javascript'
"Plug 'ryym/vim-riot'
Plug 'othree/html5.vim'
Plug 'tpope/vim-fugitive'
Plug 'qpkorr/vim-bufkill'
Plug 'tomtom/tlib_vim'
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'garbas/vim-snipmate'
Plug 'honza/vim-snippets'
Plug 'xolox/vim-session'
Plug 'mileszs/ack.vim'
Plug 'tyok/nerdtree-ack'
Plug 'schickling/vim-bufonly'
Plug 'altercation/solarized'
call plug#end()

set t_ut=
set number
set pastetoggle=<F2>
"autocmd vimenter * NERDTree
" others  delphi ekvoli inkpot jiks made_of_code maui neverland pf_earth
" other night - elda moonshine mushroom pride
colorscheme jayk-cobalt2
set laststatus=2
set hidden
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab

" Airline 
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline_theme = 'luna'

" Session
let g:session_autoload = 'no'
let g:session_autosave = 'yes'
let g:session_autosave_periodic = 'yes'

" NERDTree
let NERDTreeQuitOnOpen=1
let g:NERDTreeWinSize = 50

" tmux-navigator
let g:tmux_navigator_no_mappings = 1
"set term=xterm256
"
"set <M-=>=^[=
"set <M-->=^[-
"
let g:AutoPairsMultilineClose = 0

nnoremap <silent> <M-Left>  :TmuxNavigateLeft<cr>
"nnoremap <silent> <M-h>  :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>
"nnoremap <silent> <M-l> :TmuxNavigateRight<cr>
nnoremap <silent> <M-\> :TmuxNavigatePrevious<cr>
nnoremap <silent> `` :b#<cr>
nnoremap <silent> `= :bnext<cr>
nnoremap <silent> `- :bprev<cr>
nnoremap <silent> ^[= :bnext<cr>
nnoremap <silent> ^[- :bprev<cr>
nnoremap <S-Home> :call Nextcolor()<cr>
nnoremap <silent> <C-w> :BD<cr>
nnoremap <silent> <F8> :BufOnly<cr>
nnoremap <C-P> :CtrlPBuffer<cr>
nnoremap <F10> :CtrlPModified<cr>
"nnoremap <F3> :set invnumber<cr>
nnoremap <F3> :let [&nu, &rnu] = [!&rnu, &nu+&rnu==1]<cr>
imap    <C-r> <Plug>snipMateShow
imap    <S-Tab> <Plug>snipMateShow
imap    <F1> <Esc>
nmap    <F1> <nop>
nmap  <plug>NERDTreeTabsToggle<cr>

nmap / <Plug>(easymotion-bd-tn)
let c = 1
while c <= 9
	  execute "nnoremap `" . c . " :call BufPos_ActivateBuffer(" . c . ")<CR>"
"	  execute "nnoremap <M-" . c . "> :call BufPos_ActivateBuffer(" . c . ")<CR>"
	    let c += 1
endwhile

let g:ctrlp_regexp = 1
let g:c_scheme = 0
"let g:colorschemes = [ 'elda', 'moonshine', 'mushroom', 'pride', 'jayk-cobalt2', 'delphi', 'ekvoli', 'inkpot', 'jiks', 'made_of_code', 'maui', 'neverland', 'pf_earth']
let g:colorschemes = [ 'automation', 'badwolf', 'behelit', 'black_angus', 'blazer', 'bluez', 'bocau', 'busierbee', 'colorful256', 'duotone-darkcave', 'jiks', 'gotham256', 'graywh', 'ingretu', 'default', 'maui', 'meta5', 'moss', 'railscasts', 'skittles_berry', 'softbluev2', 'vividchalk', 'xterm16', 'zephyr' ]

function! Nextcolor()
    let g:c_scheme += 1
    let max = len(g:colorschemes)
    if g:c_scheme >= max
        let g:c_scheme = 0
    endif
    exec "colorscheme ".g:colorschemes[g:c_scheme]
    echo g:colorschemes[g:c_scheme]
endfunction

"set <C-Up>=^[OA
"set <C-Down>=^[OB
"set <C-Left>=^[OD
"set <C-Right>=^[OC
au BufRead,BufNewFile *.tag setfiletype html
au BufRead,BufNewFile *.twig setfiletype html

au BufNewFile,BufRead *.pipeline setf IRIS

fun! s:SelectIRIS()
      if getline(1) =~# '<!--IRIS'
          set ft=IRIS
      endif
endfun

au BufNewFile,BufRead * call s:SelectIRIS()

